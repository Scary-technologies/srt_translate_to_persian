1
00:00:00,230 --> 00:00:01,070
در این سخنرانی

2
00:00:01,070 --> 00:00:04,220
بیایید یاد بگیریم که چگونه ورودی را از کاربر بپذیریم.

3
00:00:04,250 --> 00:00:09,860
بنابراین هر وقت در پایتون برنامه می نویسید ، برنامه ها در واقع هیچ چیز نیستند ، اما آنها هستند

4
00:00:09,860 --> 00:00:12,890
چیزی جز مجموعه ای از دستورالعمل های داده شده به رایانه.

5
00:00:12,890 --> 00:00:18,080
و به طور معمول یک برنامه چیزی است که در واقع داده ها را دستکاری می کند.

6
00:00:18,080 --> 00:00:23,330
بنابراین بدیهی است که وقتی یک برنامه می نویسید ، باید به نوعی داده هایی را که در آن انجام می دهید داشته باشید

7
00:00:23,330 --> 00:00:26,810
ریاضی یا برخی از دستکاری های منطقی دیگر.

8
00:00:26,810 --> 00:00:30,230
و برای به دست آوردن این داده ها ، باید آن را از جایی دریافت کنید.

9
00:00:30,230 --> 00:00:35,450
یا این داده ها را از یک پرونده ، از یک پایگاه داده یا در این حالت ، همانطور که در حال یادگیری هستیم ، می خوانید

10
00:00:35,450 --> 00:00:38,990
در حال پذیرش ورودی های زیادی از کاربر نیز هستند.

11
00:00:38,990 --> 00:00:43,870
و بنابراین باید درک کنیم که چگونه داده های ورودی را از کاربر بدست آوریم.

12
00:00:43,880 --> 00:00:50,480
بنابراین به طور معمول وقتی از پایتون در انتهای عقب استفاده می شود ، داده های ورودی را از فرم HTML و آن دریافت می کنید

13
00:00:50,480 --> 00:00:52,250
داده ها به انتهای پشت منتقل می شوند.

14
00:00:52,250 --> 00:00:56,840
و پایتون اساساً آن داده ها را در سمت سرور پردازش یا دستکاری می کند.

15
00:00:56,870 --> 00:01:03,090
اما در این حالت ، همانطور که ما در حال یادگیری پایتون هستیم ، باید این داده ها را از خود کاربر دریافت کنیم که ماست

16
00:01:03,120 --> 00:01:03,750
خودمان

17
00:01:03,750 --> 00:01:08,400
بنابراین اکنون بیایید پیش برویم و بیایید درک کنیم که چگونه این داده ها را از کاربر دریافت کنیم.

18
00:01:08,400 --> 00:01:13,830
بنابراین هر زمان که مجبور شوید هر نوع ورودی را از کاربر بپذیرید ، پایتون عملکرد ویژه ای به شما می دهد

19
00:01:13,830 --> 00:01:15,480
که به عنوان ورودی خوانده می شود.

20
00:01:15,480 --> 00:01:20,550
بنابراین در اینجا بیایید یک ورودی را تایپ کرده و از پرانتز در اینجا استفاده کنیم.

21
00:01:20,550 --> 00:01:27,480
بنابراین هر وقت می گویید ورودی و وارد شدن به پوسته پایتون کاری انجام نمی دهد و به نوعی منتظر می ماند

22
00:01:27,480 --> 00:01:28,470
ورودی شما

23
00:01:28,470 --> 00:01:31,890
بنابراین اساساً از شما می خواهد که به نوعی ورودی وارد شوید.

24
00:01:31,890 --> 00:01:39,000
شما می توانید هر نوع مقدار عددی مقدار شناور ، مقدار عدد صحیح یا هر نوع رشته را نیز وارد کنید.

25
00:01:39,000 --> 00:01:43,500
بنابراین بیایید در اینجا بگوییم من چیزی مثل یک نام می گویم.

26
00:01:43,500 --> 00:01:46,170
بنابراین من می گویم جان و اگر من وارد شوم.

27
00:01:46,920 --> 00:01:52,320
فقط در این صورت برنامه ادامه می یابد و فقط در این صورت ما می خواهیم سه فلش سه گانه بگیریم که اساساً

28
00:01:52,320 --> 00:01:53,890
به این معنی است که برنامه به پایان رسید.

29
00:01:53,910 --> 00:02:00,870
بنابراین آنچه این عملکرد ورودی انجام داد این است که نوعی از این داده های خاص و به سادگی نوع نمایش داده شده است

30
00:02:00,870 --> 00:02:01,620
اینجا

31
00:02:01,620 --> 00:02:07,200
با این حال ، مشکل این است که هر زمان که این عملکرد ورودی را اجرا کنیم ، اجرای برنامه Python

32
00:02:07,200 --> 00:02:12,510
به نظر می رسد که متوقف شده است و ما هیچ گونه درخواست ای دریافت نمی کنیم که چه نوع ما را به پیشبرد

33
00:02:12,510 --> 00:02:14,490
و داده ها را وارد کنید.

34
00:02:14,490 --> 00:02:20,610
بنابراین بیایید بگوییم اگر مجبور هستید برنامه ای بنویسید که از کاربر بخواهد داده را وارد کند ، شما به سادگی نمی توانید بروید

35
00:02:20,610 --> 00:02:21,900
جلوتر و بگویید ورودی.

36
00:02:21,900 --> 00:02:27,900
و این به این دلیل است که اگر شما به سادگی ورودی را بگویید ، ممکن است کاربر که از آن برنامه استفاده می کند واقعاً درک نکند

37
00:02:27,900 --> 00:02:29,070
بعد چه کاری انجام دهیم

38
00:02:29,070 --> 00:02:32,580
و بنابراین آنچه ما انجام می دهیم این است که از عملکرد ورودی استفاده می کنیم.

39
00:02:32,580 --> 00:02:38,070
اما به این عملکرد ورودی خاص ، ما در رشته ای عبور می کنیم که کاربر را وادار به انجام کاری می کند.

40
00:02:38,070 --> 00:02:44,130
بنابراین بیایید بگوییم که آیا کار ما این است که پیش برویم و نام کاربر را بپذیریم ، می توانم بگویم.

41
00:02:44,770 --> 00:02:45,700
وارد کردن

42
00:02:46,650 --> 00:02:53,130
نام شما به عنوان یک پیام در اینجا ، که باعث می شود کاربر باشد ، خوب ، شما باید نام خود را وارد کنید.

43
00:02:53,400 --> 00:02:59,280
بنابراین اگر من جلو می روم و این عملکرد ورودی را در این حالت اجرا می کنم ، همانطور که اکنون آن را مشاهده می کنید ، از من سؤال می کند

44
00:02:59,280 --> 00:03:04,320
برای وارد کردن نام من تا بتوانم جلو بروم و نام خود را در اینجا وارد کنم ، وارد شوید.

45
00:03:04,320 --> 00:03:08,490
و این در واقع نتیجه من را به سادگی نام من می دهد.

46
00:03:08,490 --> 00:03:14,190
اکنون در اینجا ما به سادگی یک ورودی را می پذیریم ، اما در واقعیت ، هر زمان که می پذیریم نوعی

47
00:03:14,190 --> 00:03:18,770
یک داده ، ما همیشه جلو می رویم و آن را به نوعی متغیر ذخیره می کنیم.

48
00:03:18,780 --> 00:03:23,700
بنابراین بیایید بگوییم که می خواهید یک ورودی خاص بدست آورید و می خواهید آن را در یک متغیر ذخیره کنید.

49
00:03:23,700 --> 00:03:29,820
بنابراین ما از هم اکنون در مورد متغیرها آموخته ایم ، اما با این وجود ، بیایید یک مثال ساده را درک کنیم و درک کنیم

50
00:03:29,820 --> 00:03:34,620
چگونه داده هایی که توسط عملکرد ورودی پذیرفته می شوند می توانند در یک متغیر ذخیره شوند.

51
00:03:34,620 --> 00:03:40,620
بنابراین در اینجا ، اگر می خواهم یک نام را بپذیرم و اگر می خواهم این نام را در نوعی متغیر ذخیره کنم ،

52
00:03:40,620 --> 00:03:42,630
من یک متغیر به نام نام ایجاد می کنم.

53
00:03:42,630 --> 00:03:49,630
و من می گویم نام برابر است ورودی و سپس ، طبق معمول ، از کاربر می خواهم که نام شما را وارد کند.

54
00:03:49,630 --> 00:03:52,000
بنابراین این بار بیایید از پیام دیگری استفاده کنیم.

55
00:03:52,000 --> 00:03:56,500
من می گویم ، لطفا نام خود را وارد کنید.

56
00:03:56,920 --> 00:04:01,450
اگر من جلو بروم و اکنون وارد شوید ، از من می خواهد که نام خود را وارد کنم.

57
00:04:01,450 --> 00:04:03,130
من نام خود را تایپ می کردم.

58
00:04:03,130 --> 00:04:04,900
در اینجا ، ضربه ، وارد شوید.

59
00:04:04,900 --> 00:04:09,850
و همانطور که می بینید ، این بار نام این نام ساخته شده است زیرا نامی که توسط این ورودی پذیرفته شده است

60
00:04:09,850 --> 00:04:13,090
تابع در این نام متغیر ذخیره می شود.

61
00:04:13,180 --> 00:04:20,050
بنابراین اگر به من اعتقاد ندارید ، می توانید به سادگی جلو بروید و نام متغیر را در اینجا چاپ کنید و ببینید

62
00:04:20,050 --> 00:04:21,100
نتیجه ای که می گیرید

63
00:04:21,100 --> 00:04:26,980
بنابراین همانطور که می بینید ، اگر سعی کنم متغیر را در اینجا چاپ کنم ، محتوای آن متغیر چیزی نیست ،

64
00:04:26,980 --> 00:04:28,480
اما در واقع نام من است.

65
00:04:28,480 --> 00:04:31,120
بنابراین ما بعداً در مورد متغیرها بحث خواهیم کرد.

66
00:04:31,120 --> 00:04:34,360
اما این سخنرانی همه چیز در مورد پذیرش ورودی کاربر بود.

67
00:04:34,360 --> 00:04:40,390
بنابراین هر زمان که مجبور شوید ورودی کاربر را بپذیرید ، همیشه جلو می روید و از عملکرد ورودی استفاده می کنید ،

68
00:04:40,390 --> 00:04:46,120
و عملکرد ورودی اساساً اجرای برنامه را متوقف می کند و داده های ورودی را از آن می پذیرد

69
00:04:46,120 --> 00:04:52,050
کاربر به عنوان این داده ها بعداً می توانند در نوعی متغیر برای پردازش بیشتر در شما ذخیره شوند

70
00:04:52,050 --> 00:04:52,800
برنامه

71
00:04:53,070 --> 00:04:55,140
بنابراین این برای این سخنرانی است.

72
00:04:55,140 --> 00:05:00,840
و در سخنرانی بعدی ، بیایید در مورد یک زن و شوهر از عملیات رشته ای در پایتون و چگونگی آنها بیاموزیم

73
00:05:00,840 --> 00:05:02,640
هنگام نوشتن برنامه مورد استفاده قرار می گیرد.

74
00:05:02,640 --> 00:05:05,430
بنابراین بیایید یاد بگیریم که چگونه این کار را در مورد بعدی انجام دهیم.

