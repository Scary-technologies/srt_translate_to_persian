1
00:00:00,050 --> 00:00:01,340
در این سخنرانی خاص

2
00:00:01,340 --> 00:00:06,530
بیایید پیش برویم و بیایید برنامه ای بنویسیم که دو شماره از کاربر را بپذیرد.

3
00:00:06,530 --> 00:00:11,660
و سپس برنامه ما قرار است این شماره ها را جمع کند و به ما بازده بازگرداند.

4
00:00:11,660 --> 00:00:14,660
بنابراین بیایید پیش برویم و بیایید اجرای برنامه را شروع کنیم.

5
00:00:14,660 --> 00:00:20,420
بنابراین اولین کاری که ما باید انجام دهیم این است که باید شماره های کاربر را بپذیریم و به ترتیب

6
00:00:20,420 --> 00:00:26,060
برای پذیرش اعداد یا برای پذیرش هر نوع ورودی از کاربر ، کاری که انجام می دهیم این است که ما از آن استفاده می کنیم

7
00:00:26,060 --> 00:00:27,350
از عملکرد ورودی

8
00:00:27,350 --> 00:00:33,650
بنابراین بیایید شماره اول را با گفتن ورودی بپذیریم و سپس بیایید پیامی را چاپ کنیم که چیزی بگوید

9
00:00:33,650 --> 00:00:36,680
مانند شماره اول را وارد کنید.

10
00:00:37,280 --> 00:00:42,170
و اکنون پس از داشتن این شماره ، بیایید این شماره را به نوعی متغیر ذخیره کنیم.

11
00:00:42,170 --> 00:00:44,720
بنابراین من این شماره را در یک متغیر ذخیره می کنم.

12
00:00:44,750 --> 00:00:46,700
فقط برای ساده نگه داشتن چیزها.

13
00:00:46,700 --> 00:00:52,940
و به همین ترتیب ، اکنون بیایید شماره دیگری را بپذیریم و آن را در یک متغیر B ذخیره کنیم تا من می گویم B برابر است

14
00:00:52,940 --> 00:00:53,690
ورودی

15
00:00:53,690 --> 00:00:56,600
و سپس بیایید از کاربر بخواهیم شماره دوم را وارد کند.

16
00:00:56,600 --> 00:01:00,030
بنابراین شماره دوم را وارد کنید.

17
00:01:00,060 --> 00:01:00,840
خوب

18
00:01:00,840 --> 00:01:07,170
بنابراین اکنون یک بار این دو شماره را داریم ، اکنون می توانیم جلو برویم و این دو شماره را با هم اضافه کنیم و

19
00:01:07,170 --> 00:01:08,880
آن را در متغیر سوم ذخیره کنید.

20
00:01:08,880 --> 00:01:12,990
بنابراین می توانم متغیر سوم را به عنوان C ایجاد کنم یا می توانم مبلغ را نیز بگویم.

21
00:01:12,990 --> 00:01:17,190
اما برای ساده نگه داشتن کارها ، می گویم C برابر با یک به علاوه B است.

22
00:01:18,260 --> 00:01:23,870
اکنون ، هنگامی که ما اضافه کردن این شماره ها را انجام دادیم ، اکنون سرانجام ، ما باید پیش برویم و نمایش دهیم

23
00:01:23,870 --> 00:01:25,520
نتایج به کاربر.

24
00:01:25,550 --> 00:01:30,710
بنابراین برای نمایش این نتیجه به کاربر ، می گویم چاپ و به سادگی چاپ مقدار آن را چاپ کنید

25
00:01:30,740 --> 00:01:31,250
ج

26
00:01:31,490 --> 00:01:36,670
بنابراین بیایید ببینیم که این کد چگونه عملکرد دارد و بیایید ببینیم که آیا ما واقعاً قادر به دریافت خروجی هستیم یا خیر.

27
00:01:36,680 --> 00:01:39,290
بنابراین اگر این کد را ذخیره کنم و اگر این کار را اجرا کنم.

28
00:01:40,230 --> 00:01:42,450
از ما می خواهد شماره اول را وارد کنیم.

29
00:01:42,450 --> 00:01:42,960
بنابراین بیایید ببینیم

30
00:01:42,960 --> 00:01:44,340
شماره اول ده است.

31
00:01:44,760 --> 00:01:46,110
شماره دوم را وارد کنید.

32
00:01:46,110 --> 00:01:47,940
بیایید بگوییم شماره دوم 20 است.

33
00:01:48,030 --> 00:01:54,600
با این حال ، اگر من به Enter ضربه بزنم ، شما می توانید به جای دریافت 30 به عنوان نتیجه مبلغ ، آن را ببینید.

34
00:01:54,600 --> 00:01:59,190
در عوض ، نتیجه را به عنوان 1020 بدست آوردیم که 1020 است.

35
00:01:59,220 --> 00:02:01,260
حالا چرا دقیقاً همین؟

36
00:02:01,290 --> 00:02:07,710
اکنون ، این اتفاق می افتد زیرا هر وقت ورودی کاربر را در پایتون می پذیرید ، آن ورودی همیشه است

37
00:02:07,710 --> 00:02:09,210
به صورت یک رشته پذیرفته شده است.

38
00:02:09,210 --> 00:02:15,060
به عنوان مثال ، وقتی این کد را اجرا می کنید و وقتی واقعاً از شما می خواهد شماره خود را وارد کنید و چه زمانی

39
00:02:15,060 --> 00:02:20,760
شما در اینجا ده را تایپ می کنید ، این ده در واقع توسط پایتون به عنوان یک رشته پذیرفته می شوند.

40
00:02:20,970 --> 00:02:25,650
بنابراین کاری که پایتون انجام می دهد این است که ده را به عنوان یک رشته در یک متغیر ذخیره می کند.

41
00:02:25,650 --> 00:02:33,810
A 20 را به عنوان یک رشته در یک متغیر B ذخیره می کند و وقتی می گوییم C برابر با یک به علاوه ، B است ، اساساً سعی می کند

42
00:02:33,810 --> 00:02:36,000
برای پیشروی و دو رشته را هماهنگ کنید.

43
00:02:36,000 --> 00:02:43,620
و این به این دلیل است که هر وقت از اپراتور به علاوه با دو رشته استفاده می کنید ، به جای انجام اضافه کردن ،

44
00:02:43,620 --> 00:02:45,510
این در واقع عملکرد را انجام می دهد.

45
00:02:45,510 --> 00:02:47,880
و این همان چیزی است که دقیقاً در اینجا اتفاق افتاده است.

46
00:02:48,180 --> 00:02:51,480
بنابراین سؤال این است که دقیقاً چگونه این مسئله را حل کنیم.

47
00:02:51,780 --> 00:02:58,190
بنابراین این بدان معناست که هر زمان که ورودی ها را از کاربر دریافت کنیم ، زیرا این ورودی ها به شکل یک رشته هستند ،

48
00:02:58,200 --> 00:03:04,050
اول از همه ، ما باید قبل از انجام یک عمل اضافی روی آنها ، آنها را به اعداد صحیح تبدیل کنیم.

49
00:03:04,260 --> 00:03:11,520
بنابراین برای اینکه اطمینان حاصل کنم که آیا A و B در واقع رشته هایی در اینجا هستند ، من آزمایشی را انجام می دهم که در آن می خواهم

50
00:03:11,520 --> 00:03:17,370
نوع A و B را چاپ کنید ، بنابراین من می گویم نوع چاپ A

51
00:03:17,370 --> 00:03:22,770
متغیر A است و همچنین می توانیم نوع B را نیز چاپ کنیم.

52
00:03:23,130 --> 00:03:30,390
بنابراین اگر سعی می کنید این موارد را چاپ کنید ، شماره اول را به عنوان ده ثانیه از 20 تایپ کنید همانطور که می بینید

53
00:03:30,390 --> 00:03:36,240
هر دو شماره ای که ما پذیرفته ایم ، می گویند که از نوع رشته است و ما نمی خواهیم

54
00:03:36,240 --> 00:03:42,640
که از این پس به منظور تبدیل این اعداد به اعداد صحیح ، ما از یک عملکرد استفاده می کنیم

55
00:03:42,640 --> 00:03:44,440
به عنوان int یا عدد صحیح خوانده می شود.

56
00:03:44,440 --> 00:03:49,600
بنابراین پایتون در واقع با تابعی به نام int ساخته می شود که چیزی شبیه به این است.

57
00:03:49,600 --> 00:03:55,120
بنابراین از آنجا که این یک عملکرد است ، ما باید پرانتز را در اینجا بگنجانیم و شما به سادگی باید از هر نوع عبور کنید

58
00:03:55,120 --> 00:03:56,590
داده ها به این عملکرد پایان.

59
00:03:56,590 --> 00:04:00,070
و این عملکرد هر چیزی را به یک عدد صحیح تبدیل می کند.

60
00:04:00,070 --> 00:04:06,850
به عنوان مثال ، در این حالت ، همانطور که می خواهم A را به یک عدد صحیح تبدیل کنم ، از اینجا عبور خواهم کرد

61
00:04:06,850 --> 00:04:10,330
و این عملکرد پایان به من مقدار عدد صحیح را به من باز می گرداند.

62
00:04:10,330 --> 00:04:14,320
بنابراین بیایید دوباره این مقدار عدد صحیح را در همان متغیر پشتیبان تهیه کنیم.

63
00:04:14,350 --> 00:04:18,220
بنابراین اکنون آنچه اتفاق می افتد در اینجا ما یک رشته را می پذیریم.

64
00:04:18,220 --> 00:04:22,110
بنابراین اکنون در داخل متغیر A رشته ذخیره می شود.

65
00:04:22,120 --> 00:04:28,420
با این حال ، این عملکرد INT در واقع این رشته را به یک عدد صحیح تبدیل می کند و آن را دوباره به داخل ذخیره می کند

66
00:04:28,420 --> 00:04:29,260
همان متغیر

67
00:04:29,260 --> 00:04:32,440
بنابراین بیایید همین کار را با B انجام دهیم.

68
00:04:32,440 --> 00:04:37,600
بنابراین من می گویم B برابر است اجازه دهید از عملکرد پایان استفاده کنیم و در B در اینجا عبور کنیم.

69
00:04:37,600 --> 00:04:43,900
بنابراین این B ​​را از یک رشته به یک عدد صحیح تبدیل می کند و اکنون آنچه اتفاق می افتد این است که وقتی می گوییم C برابر با یک به علاوه است ،

70
00:04:43,930 --> 00:04:49,840
B Python می داند که این یک عدد صحیح است و این یک عدد صحیح است ، و از این رو اضافه می شود

71
00:04:49,840 --> 00:04:53,650
این دو عدد با هم و علاوه بر ریاضی را انجام می دهند.

72
00:04:53,860 --> 00:05:01,720
و پس از آن ما می خواهیم نتیجه خود را به عنوان C بدست آوریم ، بنابراین اگر این کار را انجام دهید ، اگر اکنون در ده و 20 تایپ کنم ، مانند شما

73
00:05:01,720 --> 00:05:05,290
می بینیم ، ما نتیجه را به عنوان 30 بدست می آوریم ، این همان چیزی است که انتظار داشتیم.

74
00:05:05,290 --> 00:05:10,780
بنابراین موتور اصلی این سخنرانی این بود که به شما نشان دهد که هر زمان که ورودی های خود را می پذیرید

75
00:05:10,780 --> 00:05:16,570
کاربر ، به ویژه اعداد ، شما باید جلو بروید و آن اعداد را به عدد صحیح یا شناور تبدیل کنید

76
00:05:16,570 --> 00:05:19,660
بسته به مورد استفاده شما ، شماره ها را به دست می آورید.

77
00:05:19,690 --> 00:05:24,880
اکنون ، یک کار دیگر که در اینجا می توان انجام داد این است که به جای نوشتن این خطوط کد ،

78
00:05:24,880 --> 00:05:27,940
ما در واقع می توانیم این کد را به چند خط فشرده کنیم.

79
00:05:28,090 --> 00:05:33,970
بنابراین آنچه شما می توانید انجام دهید این است که به محض اینکه ورودی را در اینجا بپذیرید ، به جای گرفتن A و سپس عبور

80
00:05:33,970 --> 00:05:40,720
اینجا ، کاری که می توانید انجام دهید این است که می توانید از شر این دو خط در اینجا خلاص شوید و از آن استفاده کنید

81
00:05:40,720 --> 00:05:41,950
عملکرد پایان در اینجا خود.

82
00:05:41,950 --> 00:05:47,770
بنابراین من می گویم پایان دهید و این ورودی را که از اینجا دریافت می کنید بگیرید و آن را از اینجا عبور دهید.

83
00:05:47,770 --> 00:05:52,990
بنابراین اکنون آنچه اتفاق می افتد این است که اول از همه ، ورودی را که به صورت شکل خواهد بود ، می گیرد

84
00:05:52,990 --> 00:05:58,690
از یک رشته ، و سپس این عملکرد پایان قصد دارد آن رشته را به یک عدد صحیح تبدیل کرده و آن را ذخیره کند

85
00:05:58,690 --> 00:05:59,620
به یک متغیر

86
00:05:59,620 --> 00:06:03,100
به طور مشابه ، شما می توانید همین کار را در اینجا انجام دهید.

87
00:06:03,100 --> 00:06:06,490
بنابراین می توانم پیش بروم ، یک عملکرد پایان ایجاد کنم.

88
00:06:07,530 --> 00:06:13,620
این کل ورودی را که ما داریم ، آن را برش داده و آن را در این انتها درست در اینجا قرار دهید.

89
00:06:15,800 --> 00:06:16,310
خوب

90
00:06:16,490 --> 00:06:22,250
و همچنین کار دیگری که ما در اینجا می توانیم انجام دهیم این است که ما می توانیم استفاده از C را در اینجا و در عوض من از بین ببریم

91
00:06:22,250 --> 00:06:28,100
می توانم مستقیماً بگویم چاپ یک به علاوه B ، و من می توانم از اینجا از شر این خط خلاص شوم.

92
00:06:29,570 --> 00:06:34,300
بنابراین اگر این کار را ذخیره کنم ، و اگر این کار را اجرا کنم ، می توانم شماره اول را وارد کنم.

93
00:06:34,310 --> 00:06:36,470
بیایید این بار تعداد مختلفی وارد کنیم.

94
00:06:36,470 --> 00:06:38,180
و همانطور که می بینید ، ما نتیجه گرفتیم.

95
00:06:38,180 --> 00:06:43,880
بنابراین اینگونه است که می توانید به جلو بروید ، شماره های کاربر را بپذیرید و علاوه بر آنها را انجام دهید تا بتوانید

96
00:06:43,880 --> 00:06:49,550
هر نوع عملیات دیگر را نیز مانند تفریق ، ضرب و تقسیم نیز انجام دهید.

97
00:06:49,760 --> 00:06:53,740
بنابراین این برای این سخنرانی است و من شما را در روز بعدی می بینم.

98
00:06:53,750 --> 00:06:54,590
ممنون

