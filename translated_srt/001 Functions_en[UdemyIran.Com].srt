1
00:00:00,020 --> 00:00:00,770
در این سخنرانی

2
00:00:00,770 --> 00:00:03,350
بیایید در مورد توابع موجود در پایتون بیاموزیم.

3
00:00:03,350 --> 00:00:05,630
بنابراین دقیقاً توابع چیست؟

4
00:00:05,630 --> 00:00:11,330
بنابراین یک تابع در پایتون هیچ چیز نیست ، اما این فقط یک کد کد است که کاری را انجام می دهد.

5
00:00:11,330 --> 00:00:17,060
بنابراین ما قبلاً در مورد چند کارکرد آموخته ایم و از چند عملکرد نیز استفاده کرده ایم ،

6
00:00:17,060 --> 00:00:19,550
مانند این عملکرد چاپی که ما در اینجا داریم.

7
00:00:19,550 --> 00:00:23,870
و کار این عملکرد چاپ این است که پیش بروید و چیزی را در صفحه خروجی چاپ کنید.

8
00:00:23,870 --> 00:00:29,360
بنابراین هر رشته ای که به این عملکرد چاپی مانند سلام منتقل می کنیم ، عملکرد چاپی انجام می دهد

9
00:00:29,360 --> 00:00:32,930
این است که این به سادگی پیش می رود و آن چیز را در اینجا چاپ می کند.

10
00:00:32,930 --> 00:00:39,560
اکنون این عملکرد چاپی که ما در اینجا داشتیم در واقع از پیش تعریف شده بود یا در آن ساخته شده است و در واقع

11
00:00:39,560 --> 00:00:41,000
با پایتون ساخته می شود.

12
00:00:41,000 --> 00:00:43,730
بنابراین لازم نیست این عملکرد خاص را تعریف کنید.

13
00:00:43,730 --> 00:00:49,010
با این حال ، ما همچنین می توانیم عملکردهای بسیار خود را ایجاد کنیم که برخی از اقدامات را انجام می دهند.

14
00:00:49,010 --> 00:00:54,200
بنابراین همانطور که عملکرد چاپ برخی از اقدامات را انجام می دهد ، می توانیم عملکرد خودمان را تعریف کنیم که انجام می دهد

15
00:00:54,200 --> 00:00:56,740
نوع دیگری از اقدامات آنطور که می خواهیم.

16
00:00:56,750 --> 00:01:02,730
بنابراین حتی قبل از درک عملکرد ، ابتدا درک کنیم که چرا دقیقاً توابع مورد نیاز هستند.

17
00:01:02,730 --> 00:01:04,500
بنابراین بیایید یک مثال بزنیم.

18
00:01:04,500 --> 00:01:07,320
بنابراین بیایید بگوییم که می خواهم برنامه ای بنویسم که کاری انجام دهد.

19
00:01:07,320 --> 00:01:12,390
بنابراین بیایید بگوییم که می خواهم مجموعه ای از کد تصادفی را اضافه کنم ، مثل اینکه سلام کنیم.

20
00:01:12,420 --> 00:01:18,420
سپس دوباره ، من می خواهم چیزی مثل سلام بگویم ، و بیایید بگوییم دوباره خط تصادفی دیگری را اضافه می کنم

21
00:01:18,420 --> 00:01:20,010
کد اینجا مانند تام.

22
00:01:20,010 --> 00:01:26,040
بنابراین بیایید بگوییم که این خطوط معنایی دارند و بیایید بگوییم که من می خواهم این اقدامات خاص را انجام دهم

23
00:01:26,040 --> 00:01:27,630
چندین بار

24
00:01:27,630 --> 00:01:33,300
بنابراین بیایید بگوییم که من به دلایلی باید این مجموعه کد را در چندین بار در برنامه خود تکرار کنم.

25
00:01:33,300 --> 00:01:37,860
بنابراین کاری که من انجام می دهم این است که من به سادگی این را کپی می کنم و می توانم آن را در اینجا چسباندم.

26
00:01:37,860 --> 00:01:43,170
بنابراین اگر می خواهم آن را در اینجا و اینجا اجرا کنم ، من به سادگی این کار را می کردم و این کار را اجرا می کردم.

27
00:01:43,170 --> 00:01:46,350
و بدون هیچ مشکلی کاملاً خوب کار خواهد کرد.

28
00:01:46,350 --> 00:01:53,730
بنابراین هر زمان که مجبور شوید چندین بار از همان بلوک کد در کد خود استفاده کنید ، در آن خاص

29
00:01:53,730 --> 00:01:56,040
مورد ، شما می توانید آن کد خاص را کپی کنید.

30
00:01:56,040 --> 00:02:02,520
اما یک مشکل در این رویکرد وجود دارد و این مشکل تکرار کد است.

31
00:02:02,520 --> 00:02:09,120
بنابراین در مهندسی نرم افزار ، تکرار همان مجموعه کد چندین بار به عنوان a نامیده می شود

32
00:02:09,120 --> 00:02:09,930
تمرین بد

33
00:02:09,930 --> 00:02:13,050
حالا بیایید درک کنیم که چرا دقیقاً این یک عمل بد است.

34
00:02:13,050 --> 00:02:19,260
بیایید بگوییم اگر رئیس شما به جای سلام خوب می گوید ، باید اکنون خداحافظی کنید.

35
00:02:19,290 --> 00:02:24,060
سپس آنچه شما باید در این حالت انجام دهید این است که شما باید در هر سه مکان تغییراتی ایجاد کنید.

36
00:02:24,060 --> 00:02:26,340
بنابراین من باید خداحافظی را در اینجا اضافه کنم.

37
00:02:26,520 --> 00:02:28,950
من همچنین باید خداحافظی را در اینجا اضافه کنم.

38
00:02:28,950 --> 00:02:32,130
و من همچنین باید در اینجا خداحافظی کنم.

39
00:02:32,280 --> 00:02:38,070
و اگر این مجموعه کد ، که شما در اینجا دارید ، اگر این مجموعه از کد در واقع صدها نفر وجود داشته باشد

40
00:02:38,070 --> 00:02:44,400
بار در کد خود ، پس باید پیش بروید و خط کد را تغییر دهید ، که می گوید خداحافظی در هر یک

41
00:02:44,400 --> 00:02:46,200
از آن 100 نمونه

42
00:02:46,200 --> 00:02:52,920
به همین دلیل تکرار کد در مهندسی نرم افزار چنین عمل بدی است و اینجاست

43
00:02:52,920 --> 00:02:54,000
وارد تصویر شوید

44
00:02:54,000 --> 00:03:01,400
بنابراین آنچه توابع انجام می دهند این است که آنها به شما امکان می دهند حتی در هر مکان از همان مجموعه کد در چندین مکان استفاده کنید

45
00:03:01,400 --> 00:03:03,530
اگر یک بار آنها را تعریف کرده اید.

46
00:03:03,530 --> 00:03:08,600
بنابراین اکنون بیایید درک کنیم که چگونه یک عملکرد ایجاد می شود و چگونه مشکل ما را حل می کند.

47
00:03:08,600 --> 00:03:14,600
بنابراین در اینجا کاری که ما انجام می دهیم قطعه کدی است که ما در اینجا داریم ، که این کد است.

48
00:03:14,630 --> 00:03:18,380
به جای اینکه چندین بار آن را داشته باشیم ، آن را درون یک عملکرد قرار خواهیم داد.

49
00:03:18,380 --> 00:03:21,200
بنابراین ابتدا درک کنیم که چگونه یک تابع ایجاد کنیم.

50
00:03:21,200 --> 00:03:28,280
بنابراین هر زمان که مجبور شوید یک تابع ایجاد کنید ، می گوییم که می خواهیم یک عملکرد را تعریف کنیم و برای تعریف

51
00:03:28,280 --> 00:03:33,830
یک تابع ، ما در کلمه کلیدی DEF تایپ می کنیم ، و سپس باید عملکرد خود را به عنوان چیزی معرفی کنیم.

52
00:03:33,920 --> 00:03:40,010
بنابراین به عنوان قطعه قبلی کد که در واقع پیغامی داشتیم ، سلام ، پس بیایید

53
00:03:40,010 --> 00:03:44,510
این عملکرد را به عنوان سلام نامگذاری کنید ، می توانید عملکرد خود را ، هر چیزی که می خواهید نامگذاری کنید.

54
00:03:44,510 --> 00:03:47,600
بنابراین در این حالت من عملکرد خود را به عنوان سلام معرفی کرده ام.

55
00:03:47,600 --> 00:03:51,950
و هر زمان که یک عملکرد را تعریف می کنید ، باید پرانتز را در اینجا اضافه کنید.

56
00:03:51,950 --> 00:03:56,480
و این پرانتز هر زمان که مجبور شویم پارامترها را به یک تابع منتقل کنیم ، استفاده می شود.

57
00:03:56,480 --> 00:03:59,480
بنابراین در حال حاضر شما در مورد پارامترها یاد نمی گیرید.

58
00:03:59,480 --> 00:04:01,140
بعداً می خواهیم این را بیاموزیم.

59
00:04:01,140 --> 00:04:03,480
اما اینگونه است که یک عملکرد تعریف می شود.

60
00:04:03,510 --> 00:04:06,720
اکنون در اینجا ما گفته ایم که می خواهیم یک عملکرد را تعریف کنیم.

61
00:04:06,720 --> 00:04:08,490
نام عملکرد سلام است.

62
00:04:08,490 --> 00:04:13,320
ما هیچ نوع پارامتری را تصویب نکرده ایم و اکنون باید بدنه عملکرد را تعریف کنیم.

63
00:04:13,320 --> 00:04:18,209
و بدنه عملکرد چیزی نیست جز کدی که در آن عملکرد خاص موجود است.

64
00:04:18,510 --> 00:04:23,370
بنابراین در این عملکرد سلام خاص ، ما می خواهیم آن کدی را که قبلاً داشتیم اضافه کنیم.

65
00:04:23,520 --> 00:04:31,740
بنابراین هر وقت مجبورید یک بدن عملکردی را تعریف کنید ، یک روده بزرگ را در اینجا اضافه می کنید و به Enter ضربه می زنید و به طور خودکار خواهید بود

66
00:04:31,740 --> 00:04:33,180
در اینجا غرق شوید.

67
00:04:33,270 --> 00:04:39,180
بنابراین هر کدی که در اینجا می نویسید به روشی متلاطم در واقع بخشی از آن عملکرد می شود

68
00:04:39,180 --> 00:04:39,840
تعریف

69
00:04:39,840 --> 00:04:46,050
بنابراین من می توانم به سادگی جلو بروم و آن قطعه کد را در اینجا چسباندم و شما می توانید آن چیزها را در اینجا تایپ کنید

70
00:04:46,050 --> 00:04:47,280
همچنین اگر می خواهید.

71
00:04:47,760 --> 00:04:54,060
بنابراین همانطور که اکنون می بینید ، این سه خط کد ، که اکنون در اینجا داریم ، آنها واقعاً تبدیل شده اند

72
00:04:54,060 --> 00:04:55,260
بخشی از عملکرد.

73
00:04:55,260 --> 00:04:55,890
سلام

74
00:04:56,040 --> 00:04:59,490
و این درست در اینجا ، که تمام چیز به عنوان آن نامیده می شود.

75
00:04:59,600 --> 00:05:03,620
تعریف عملکرد زیرا ما یک تابع را تعریف کرده ایم.

76
00:05:03,620 --> 00:05:04,220
سلام

77
00:05:04,220 --> 00:05:05,450
و ما این را گفته ایم.

78
00:05:05,450 --> 00:05:09,170
خوب ، این کدی است که عملکرد Hello شامل آن است.

79
00:05:09,530 --> 00:05:14,900
حال بیایید این را ذخیره کنیم و بیایید این کار را انجام دهیم و ببینیم دقیقاً چه اتفاقی می افتد.

80
00:05:14,900 --> 00:05:18,620
بنابراین وقتی این کار را اجرا کردید ، در اینجا هیچ نوع خروجی دریافت نخواهید کرد.

81
00:05:18,620 --> 00:05:25,580
و این به این دلیل است که ما به سادگی یک تابع و کدی را تعریف کرده ایم که در یک تابع تعریف شده است

82
00:05:25,580 --> 00:05:29,890
هرگز اجرا نمی شود مگر اینکه و تا زمانی که آن عملکرد خاص را صدا نکنید.

83
00:05:29,900 --> 00:05:33,710
بنابراین کدی که در اینجا داریم به عنوان تعریف عملکرد نامیده می شود.

84
00:05:33,710 --> 00:05:39,530
و هر زمان که مجبور شوید کد را در داخل یک تابع اجرا کنید ، باید آن عملکرد خاص را صدا کنید.

85
00:05:39,530 --> 00:05:44,930
و هر زمان که مجبور شوید یک عملکرد را فراخوانی کنید ، به سادگی جلو می روید و نام عملکرد را تایپ می کنید.

86
00:05:44,930 --> 00:05:49,190
بنابراین در این حالت ، من سلام می کنم و همچنین پرانتز را درست در مقابل آن اضافه می کنم.

87
00:05:49,280 --> 00:05:52,910
بنابراین این درست در اینجا این عملکرد را فراخوانی می کند.

88
00:05:52,910 --> 00:05:57,860
و آنچه که اساساً فراخوانی به معنای این است که در واقع این کد را می گیرد و آن را برای آن اجرا خواهد کرد

89
00:05:57,860 --> 00:05:58,220
شما

90
00:05:58,220 --> 00:06:05,040
بنابراین اگر این کار را ذخیره کنم ، اگر این کار را اجرا کنم ، همانطور که می بینید ، اکنون اساساً پیش می رود و اجرا می شود

91
00:06:05,040 --> 00:06:06,630
کدی که ما در اینجا داشتیم.

92
00:06:06,840 --> 00:06:09,840
حال ، اگر من یک بار دیگر این عملکرد را صدا کنم چه اتفاقی می افتد؟

93
00:06:09,840 --> 00:06:16,470
بنابراین وقتی این عملکرد را صدا می کنم ، یک بار دیگر ، این کد را یک بار اجرا می کند و سپس اجرا می شود

94
00:06:16,470 --> 00:06:20,430
آن کد خاص یک بار دیگر زیرا ما آن عملکرد را دو بار خوانده ایم.

95
00:06:20,430 --> 00:06:24,270
و اگر خط دیگری از کد بین این دو کارکرد داشته باشم چه می شود؟

96
00:06:24,270 --> 00:06:31,710
بنابراین من یک خط منظم از کد دارم ، مانند بیایید بگوییم ، بیایید بگوییم این یک خط کد است.

97
00:06:31,710 --> 00:06:37,170
بنابراین اکنون آنچه اتفاق می افتد این است که این عملکرد نامیده می شود که به این معنی است که این گفته های چاپی خواهد بود

98
00:06:37,170 --> 00:06:42,600
اعدام شده ، سپس این بیانیه اجرا می شود و سپس عملکرد دوباره فراخوانی می شود.

99
00:06:42,600 --> 00:06:45,180
و سپس دوباره ، این مجموعه از کد اجرا می شود.

100
00:06:45,180 --> 00:06:47,550
بنابراین اگر این کار را اجرا کنم ، همانطور که می بینید.

101
00:06:48,050 --> 00:06:52,430
این عملکرد تماس شماره یک است که مسئولیت این خروجی را بر عهده دارد.

102
00:06:52,460 --> 00:06:56,180
سپس ما این خط کد را داریم که توسط این عبارت چاپی چاپ می شود.

103
00:06:56,180 --> 00:07:01,250
و سپس دوباره ، همانطور که عملکرد دوباره فراخوانده می شود ، ما دوباره با بالا و تام داریم.

104
00:07:01,280 --> 00:07:06,530
اکنون ، مزایای استفاده از یک عملکرد این است که بیایید بگوییم رئیس شما دوباره می گوید ، خوب ، شما این کار را نمی کنید

105
00:07:06,530 --> 00:07:09,720
باید اینجا خداحافظی کنید یا در عوض باید سلام کنید.

106
00:07:09,740 --> 00:07:12,200
بنابراین می توانید این کار را به سادگی با سلام جایگزین کنید.

107
00:07:12,200 --> 00:07:18,530
و اگر اکنون این کار را اجرا کنید ، تمام تماس های عملکردی که ما در اینجا داریم ، آنها این کد را اجرا می کنند

108
00:07:18,530 --> 00:07:19,340
که می گوید چاپ

109
00:07:19,370 --> 00:07:19,790
سلام

110
00:07:19,790 --> 00:07:24,050
بنابراین این بدان معناست که در اینجا بلافاصله متوجه خواهید شد که کد تکرار نشده است.

111
00:07:24,050 --> 00:07:29,360
و از آنجا که کد تکرار نمی شود ، ما می توانیم یک بار تغییر ایجاد کنیم و همه تغییرات منعکس می شود

112
00:07:29,360 --> 00:07:31,270
در اینجا در داخل تماس عملکرد.

113
00:07:31,280 --> 00:07:37,010
بنابراین چندین مزیت دیگر برای استفاده از توابع نیز وجود دارد ، و شما مزایا را تجربه خواهید کرد

114
00:07:37,010 --> 00:07:39,950
استفاده از توابع در سخنرانی های آینده.

115
00:07:39,950 --> 00:07:43,370
اما در حال حاضر ، فقط درک کنید که اینگونه عملکرد را ایجاد می کنید.

116
00:07:43,370 --> 00:07:46,510
و من می دانم که این عملکرد به هیچ وجه معنی ندارد.

117
00:07:46,520 --> 00:07:50,640
این فقط یک مثال ساده بود تا به شما نشان دهد دقیقاً یک عملکرد چیست.

118
00:07:50,640 --> 00:07:54,780
بنابراین در اینجا ما یک تعریف عملکرد داریم ، سپس یک تماس عملکردی داریم.

119
00:07:54,780 --> 00:08:00,930
و هر وقت مجبور شدی یک تابع را تعریف کنید ، می گویید DEF ، شما یک عملکرد را به نام خود می دهید ، پس شما

120
00:08:00,930 --> 00:08:03,750
برای عبور پارامترها از پرانتز استفاده کنید.

121
00:08:03,750 --> 00:08:06,120
بنابراین ما هیچ پارامتر را در اینجا نگذاشته ایم.

122
00:08:06,120 --> 00:08:11,940
و سپس شما اساساً برخی از کد ها را در اینجا تورفتگی می کنید و هر کد که در واقع بخشی شود

123
00:08:11,940 --> 00:08:13,530
از آن تعریف عملکرد

124
00:08:14,060 --> 00:08:20,390
و هر زمان که یک تعریف عملکرد داشته باشید و هر زمان که کد را اجرا کنید ، آن کد خاص

125
00:08:20,390 --> 00:08:24,230
قرار نیست اجرا شود مگر اینکه و تا زمانی که آن عملکرد خاص را صدا نکنید.

126
00:08:24,230 --> 00:08:29,720
بنابراین در سخنرانی بعدی ، بیایید یاد بگیریم که چگونه می توانیم پیش برویم و یک آرگومان را به یک عملکرد منتقل کنیم.

127
00:08:29,720 --> 00:08:33,860
بنابراین بیایید در مورد انتقال آرگومان ها به یک عملکرد در سخنرانی بعدی بیاموزیم.

