1
00:00:00,140 --> 00:00:03,530
حال بیایید یاد بگیریم که چرا پایتون یک زبان دینامیکی تایپ شده است.

2
00:00:03,530 --> 00:00:07,260
بنابراین حتی قبل از یادگیری آن ، ما باید یاد بگیریم که تایپ پویا چیست.

3
00:00:07,280 --> 00:00:12,830
بنابراین وقتی هر نوع متغیر را در یک زبان برنامه نویسی مانند C اعلام می کنیم ، در واقع ما نیز نیاز داریم

4
00:00:12,830 --> 00:00:14,670
نوع متغیر را تعریف کنید.

5
00:00:14,690 --> 00:00:19,610
حال اگر نمی دانید اعلامیه متغیر چیست ، اساساً وقتی می خواهید مرتب سازی کنید

6
00:00:19,610 --> 00:00:21,290
از یک داده به یک متغیر.

7
00:00:21,300 --> 00:00:23,060
بنابراین بیایید یک مثال بزنیم.

8
00:00:23,060 --> 00:00:25,010
بنابراین این یک نمونه درست در اینجا است.

9
00:00:25,010 --> 00:00:27,710
و هر زمان که می خواهید متغیر را در C اعلام کنید

10
00:00:27,740 --> 00:00:32,509
کاری که ما انجام می دهیم این است که می گوییم نام متغیر ، در این حالت یک برابر با ده است.

11
00:00:32,509 --> 00:00:35,540
و قبل از نام متغیر ، نوع متغیر را اعلام می کنیم.

12
00:00:35,540 --> 00:00:38,480
بنابراین در این حالت ، نوع متغیر یک عدد صحیح است.

13
00:00:38,480 --> 00:00:44,800
بنابراین ما INT را تایپ می کنیم و این INT اساساً بیان می کند که می خواهیم یک مقدار عدد صحیح را در این متغیر ذخیره کنیم.

14
00:00:44,810 --> 00:00:50,480
اکنون مشکل این رویکرد این است که به محض اعلام یک نوع متغیر در طول اجرای

15
00:00:50,480 --> 00:00:54,350
از برنامه ، شما نمی توانید نوع دیگری از ارزش را در آن ذخیره کنید.

16
00:00:54,350 --> 00:01:00,840
به عنوان مثال ، از آنجا که این یک متغیر عدد صحیح است ، شما نمی توانید پیش بروید و محتوای این چیز را تغییر دهید

17
00:01:00,870 --> 00:01:03,120
به یک رشته ، بنابراین شما نمی توانید یک رشته را ذخیره کنید.

18
00:01:03,120 --> 00:01:05,459
چیزی شبیه سلام جهان به این متغیر.

19
00:01:05,489 --> 00:01:11,340
به این دلیل است که برای طول عمر برنامه ، این متغیر یک متغیر عدد صحیح است.

20
00:01:11,370 --> 00:01:13,920
با این حال ، این مورد در مورد پایتون نیست.

21
00:01:13,920 --> 00:01:19,680
وقتی می خواهید متغیر را در پایتون اعلام کنید ، لازم نیست نوع دیگری را به آن متغیر اختصاص دهید.

22
00:01:19,680 --> 00:01:24,900
بنابراین بیایید بگوییم اگر می خواهید یک متغیر A ایجاد کنید ، به آن یک مقدار ده اختصاص دهید ، می توانید بدون آن این کار را انجام دهید

23
00:01:24,900 --> 00:01:27,210
مشخص کردن پایان در اینجا مانند آن.

24
00:01:27,570 --> 00:01:34,620
و آنچه این کار را انجام می دهد این است که این به ما امکان می دهد تا جلو برویم و نوع متغیر را در متفاوت تغییر دهیم

25
00:01:34,680 --> 00:01:35,940
زمان در طول اعدام

26
00:01:35,940 --> 00:01:42,090
به عنوان مثال ، اگر در بالا من یک برابر با ده در پایین اعلام کرده ام ، می توانم جلو و در

27
00:01:42,120 --> 00:01:46,110
در آن برنامه خاص ، من می توانم یک مقدار رشته را در همان متغیر ذخیره کنم.

28
00:01:46,110 --> 00:01:53,100
بنابراین به همین دلیل ، یک متغیر می تواند در زمان های مختلف در حین اجرای و پویا از نوع متفاوتی برخوردار باشد

29
00:01:53,130 --> 00:01:53,880
تایپ کردن

30
00:01:54,420 --> 00:01:57,180
نوع متغیر در زمان اجرا تصمیم می گیرد.

31
00:01:57,180 --> 00:02:02,730
بنابراین ، به عنوان مثال ، هنگامی که از یک زبان برنامه نویسی دینامیکی مانند پایتون استفاده می کنید ، متغیر

32
00:02:02,730 --> 00:02:07,440
تکلیف در واقع زمانی انجام می شود که برنامه در واقع اجرا شود و در زمان کامپایل انجام نمی شود.

33
00:02:07,980 --> 00:02:13,680
و این به پایتون نوعی مزیت می بخشد ، مثل اینکه می توانید پیش بروید و نوع متغیر را تغییر دهید

34
00:02:13,680 --> 00:02:16,290
در هر نقطه و هر زمان در برنامه وقتی می خواهید.

35
00:02:16,320 --> 00:02:21,930
بنابراین به همین دلیل است که پایتون به عنوان یک زبان برنامه نویسی دینامیکی تایپ می شود ، زیرا متغیرها

36
00:02:21,930 --> 00:02:23,820
یک نوع ثابت ندارید.

37
00:02:23,850 --> 00:02:26,160
پایتون زباله جمع آوری شده است.

38
00:02:26,250 --> 00:02:30,870
اکنون ، جمع آوری زباله یک مفهوم بسیار مهم برای درک در علوم کامپیوتر است.

39
00:02:30,870 --> 00:02:35,220
بنابراین بیایید پیش برویم و ابتدا بفهمیم که مجموعه زباله ها دقیقاً چیست.

40
00:02:35,430 --> 00:02:39,870
بنابراین وقتی کد می نویسید ، معمولاً باید پیش بروید و از داده استفاده کنید.

41
00:02:39,870 --> 00:02:43,670
و این داده ها باید در حافظه رایانه ذخیره شوند.

42
00:02:43,680 --> 00:02:49,740
به عنوان مثال ، بیایید بگوییم وقتی متغیر ایجاد می کنید و یک مقدار را در آن ذخیره می کنید ، بنابراین این همان چیزی است که

43
00:02:49,740 --> 00:02:50,280
به نظر می رسد

44
00:02:50,280 --> 00:02:55,930
بنابراین وقتی متغیر را اختصاص می دهیم و وقتی یک مقدار را در یک متغیر ذخیره می کنیم ، آنچه را که لزوماً انجام می دهیم

45
00:02:55,930 --> 00:03:00,670
این است که ما این مقدار را در یک مکان حافظه در داخل رایانه خود ذخیره می کنیم.

46
00:03:00,670 --> 00:03:06,160
اکنون ، هنگامی که برنامه با استفاده از کار ما با این داده ها انجام می شود ، مکان حافظه هنوز آزاد نمی شود

47
00:03:06,160 --> 00:03:12,250
UP و برنامه نویس مجبور است به صورت دستی پیش برود و آن فضاها یا مکان های حافظه را که بودند ، آزاد کند

48
00:03:12,250 --> 00:03:13,930
قبلاً اختصاص داده شده است.

49
00:03:14,050 --> 00:03:19,090
اکنون این در واقع سردرد برای برنامه نویسان است زیرا همراه با نوشتن یک برنامه ، همراه با پس انداز

50
00:03:19,090 --> 00:03:24,910
داده های موجود در یک متغیر ، ما هم اکنون باید با پاک کردن آن فضای حافظه نیز زحمت کشیدیم.

51
00:03:24,910 --> 00:03:26,230
و این یک سردرد است.

52
00:03:26,230 --> 00:03:32,080
با این حال ، برخی از زبانهای برنامه نویسی دارای ویژگی ای هستند که به عنوان جمع آوری زباله خوانده می شود.

53
00:03:32,710 --> 00:03:36,550
جمع آوری زباله فرایندی از مدیریت خودکار حافظه است.

54
00:03:36,580 --> 00:03:42,220
جمع کننده زباله حافظه را بازیابی می کند ، که توسط این برنامه اختصاص یافته است اما دیگر مورد استفاده قرار نمی گیرد.

55
00:03:42,490 --> 00:03:47,980
و پایتون زبان جمع آوری شده زباله است ، به این معنی که پایتون با جمع کننده زباله همراه است.

56
00:03:48,430 --> 00:03:54,160
این بدان معناست که به عنوان برنامه نویسان ، لازم نیست که نگران آزاد کردن یا بازپس گیری استفاده نشده استفاده نشده باشیم

57
00:03:54,160 --> 00:03:55,030
فضای حافظه

58
00:03:55,030 --> 00:04:00,610
و ما به عنوان یک برنامه نویسان مجبور نیستیم حافظه را به صورت دستی جمع کنیم زیرا پایتون همراه است

59
00:04:00,610 --> 00:04:07,660
جمع کننده زباله ، فرآیند آزاد کردن حافظه به طور خودکار توسط خود پایتون انجام می شود

60
00:04:07,660 --> 00:04:12,220
که ما می توانیم به جای نگرانی از اینکه آیا ما نگران باشیم ، می توانیم پیش برویم و روی نوشتن منطق برنامه نویسی تمرکز کنیم

61
00:04:12,220 --> 00:04:13,810
از حافظه استفاده می شود.

62
00:04:13,810 --> 00:04:17,500
و از این پس می گوییم که پایتون یک زبان جمع آوری شده زباله است.

63
00:04:17,500 --> 00:04:21,519
بنابراین این یک مقدمه مختصر در مورد پایتون و ویژگی های مختلف آن بود.

64
00:04:21,519 --> 00:04:26,260
بنابراین در سخنرانی بعدی ، بیایید پیش برویم و بیایید اولین برنامه خود را در پایتون بنویسیم.

65
00:04:26,260 --> 00:04:30,360
بنابراین بسیار ممنونم که تماشا می کنید و من شما را در مورد بعدی می بینم.

66
00:04:30,370 --> 00:04:31,120
ممنون

